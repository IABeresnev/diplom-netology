---
# Устраняем проблемы с Selinux и получаем проблемы с безопасностью, но если логировать и парсить audit.log то все будет под контролем.
- name: Selinux to permissive mode
  selinux:
    policy: targeted
    state: permissive
# Перезагружаемся и ждем для продолжения, если не ждать падает в ошибку.
- name: Reboot machine and wait 60 sec
  ansible.builtin.reboot:
    reboot_timeout: 60
# Добавляем репозитории
- name: Add epel-release repo
  yum:
    name: epel-release
    state: present
# Устанавливаем Nginx
- name: Install Nginx
  yum:
    name:
      - nginx
    state: present
  register:
    nginxinstalled

# Проверяем что сервис разрешен для автозапуска.
- name: Enable service nginx and ensure it is not masked
  become: true
  systemd:
    name: nginx
    enabled: yes
    masked: no

# Создаем директории необходимые для работы, костыльный вариант, надо переписать.
- name: Set up nginx directories
  file:
    path: "/etc/nginx/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0640
  with_items:
    - sites-available
    - sites-enabled

# Заполняем и загружаем конфигурационные файлы для сайтов
- name: Add Site Config
  template:
    src: reverseproxy.conf.j2
    dest: /etc/nginx/conf.d/{{ item.key }}.conf
    owner: root
    group: root
    mode: 0640
  with_dict: "{{ nginx_revproxy_sites }}"
  register:
    siteconfig
  when:
    - nginxinstalled is success

# - name: Get Active Sites
#   command: ls -1 /etc/nginx/conf.d/
#   changed_when: "active.stdout_lines != nginx_revproxy_sites.keys()|sort()"
#   check_mode: false
#   register: active

# - name: De-activate Sites
#   file:
#     path: /etc/nginx/conf.d/{{ item }}
#     state: absent
#   with_items: "{{ active.stdout_lines }}"
#   notify: Reload Nginx
#   when:
#     - item not in nginx_revproxy_sites
#     - nginx_revproxy_de_activate_sites

# - name: Enable Site Config
#   file:
#     src: /etc/nginx/conf.d/{{ item.key }}.conf
#     dest: /etc/nginx/sites-enabled/{{ item.key }}
#     state: link
#   with_dict: "{{ nginx_revproxy_sites }}"
#   notify: Reload Nginx
#   when:
#     - siteconfig is success
#     - not item.value.letsencrypt | default(True)
#     - not ansible_check_mode

# Создаем корневые директории для получения сертификатов
- name: Create WebRoot sites
  file:
    dest: /var/www/{{ item.key }}/.well-known
    mode: 0775
    state: directory
    owner: nginx
    group: nginx
  with_dict: "{{ nginx_revproxy_sites }}"
  notify: Reload Nginx
  when:
    - nginxinstalled is success

#  Провемяем/устанавливаем необходимые права доступа
- name: WebRoot Permissions Sites
  file:
    dest: /var/www/{{ item.key }}
    mode: 0775
    state: directory
    owner: nginx
    group: nginx
    recurse: true
  with_dict: "{{ nginx_revproxy_sites }}"
  notify: Reload Nginx
  when:
    - nginxinstalled is success

# - name: Get WebRoot Sites
#   command: ls -1 /var/www/
#   changed_when: "webroot.stdout_lines != nginx_revproxy_sites.keys()|sort()"
#   check_mode: false
#   register: webroot
#   tags:
#     - nginxrevproxy

# - name: Remove WebRoot Sites
#   file:
#     path: /var/www/{{ item }}/
#     state: absent
#   with_items: "{{ webroot.stdout_lines }}"
#   notify: Reload Nginx
#   when:
#     - item not in nginx_revproxy_sites
#     - nginx_revproxy_remove_webroot_sites
#   tags:
#     - nginxrevproxy

# Подключаем задачи для получения сертификатов
- include_tasks: letsencrypt.yml