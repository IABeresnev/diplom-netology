---
# Собираем данные об окружении для корректной работы автоматизации
- name: Gather variables for each operating system
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
    - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
    - "{{ ansible_distribution | lower }}.yml"
    - "{{ ansible_os_family | lower }}.yml"
# Проверка корректности заполнения переменных и корректности использования роли
- include: pretask.yml
# Установка сервиса
- include: install.yml
  become: true
# Конфигурирование сервиса
- include: configure.yml
  become: true
# Устанвока расширений для сервиса
- include: plugins.yml
  when: grafana_plugins != []
# Перезапуск сервиса
- name: Restart grafana before configuring datasources and dashboards
  meta: flush_handlers
# Ожидаем когда сервис перезапустить и откроет порт на прослушивание
- name: Wait for grafana to start (http/s)
  wait_for:
    host: "{{ grafana_address }}"
    port: "{{ grafana_port }}"
  when: grafana_server.protocol is undefined or grafana_server.protocol in ['http', 'https']
# Ожидаем запуска сокета сервиса
- name: Wait for grafana to start (socket)
  wait_for:
    path: "{{ grafana_server.socket }}"
  when: grafana_server.protocol is defined and grafana_server.protocol == 'socket'
# Создаем и настраиваем работу с сервисом через API
- include: api_keys.yml
  when: grafana_api_keys | length > 0
# Подключаем и настраиваем источники данных
- include: datasources.yml
  when: grafana_datasources != []
# Подключаем и настраиваем оповещения
- include: notifications.yml
  when: grafana_alert_notifications | length > 0
# Поверяем наличие дашбордов в локальных директориях
- name: "Check if there are any dashboards in local {{ grafana_dashboards_dir }}"
  become: false
  set_fact:
    found_dashboards: "{{ lookup('fileglob', grafana_dashboards_dir + '/*.json', wantlist=True) }}"
# Подключаем и настраиваем дашборды для сервиса
- include: dashboards.yml
  when: grafana_dashboards | length > 0 or found_dashboards | length > 0
